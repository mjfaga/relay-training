type Query {
  users: [User]
  user(id: ID!): User
}

type Mutation {
  addFavoriteFood(
    userId: ID!
    name: String!
    eatingFrequency: EatingFrequency!
  ): FavoriteFoodItemResponse
}

type FavoriteFoodItemResponse {
  favoriteFoodEdge: FavoriteFoodItemEdge
}

type User {
  id: ID!
  name: String!
  eyeColor: String
  favoriteFoods(first: Int): FavoriteFoodItemConnection
}

type FavoriteFoodItemConnection {
  edges: [FavoriteFoodItemEdge]
  pageInfo: PageInfo
}

type FavoriteFoodItemEdge {
  cursor: String!
  node: FavoriteFoodItem
}

type FavoriteFoodItem {
  id: ID!
  foodItem: FoodItem!
  user: User!
  eatingFrequency: EatingFrequency!
}

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
}

type FoodItem {
  id: ID!
  name: String!
}

enum EatingFrequency {
  DAILY
  WEEKLY
  MONTHLY
}
